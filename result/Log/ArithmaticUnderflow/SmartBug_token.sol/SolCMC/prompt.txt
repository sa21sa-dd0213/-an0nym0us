### Role  
You are a blockchain security expert specializing in analyzing vulnerabilities in smart contracts using formal verification.  

### Source Program  
Below is the source code of a Solidity program that has been proven to be vulnerable:  
pragma solidity ^0.8.11;

contract Token {
    mapping(address => uint) public balances;
    uint public totalSupply;

    constructor(uint _initialSupply) public{
    balances[msg.sender] = totalSupply = _initialSupply;
    }

    function transfer(address _to, uint _value) public returns (bool) {
        require(balances[msg.sender] - _value >= 0); 
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        return true;
    }

    function balanceOf(address _owner) public view returns (uint balance) {
        return balances[_owner];
    }
}

### Counterexample  
The verifier SolCMC identified a arithmetic underflow in this program and generated a counterexample detailing the state changes, transaction sequence, violated property, and location of the final violation state:  
Underflow (resulting value less than 0) happens here.
Counterexample:
totalSupply = 0
_to = 0x0
_value = 1
 = false

Transaction trace:
Token.constructor(0){ msg.sender: 0x6dc4 }
State: totalSupply = 0
Token.transfer(0x0, 1){ msg.sender: 0x1712 }
  --> origin.sol:14:17:
   |
14 |         require(balances[msg.sender] - _value >= 0);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Underflow (resulting value less than 0) check is safe!
  --> origin.sol:15:9:
   |
15 |         balances[msg.sender] -= _value;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

### Vulnerability Context
The violated property, arithmetic underflow, occurs when a value goes below the minimum limit for a data type, causing it to wrap around to a large value. A common approach to trigger an underflow is to subtract a value larger than the stored value.

### Background  
Real-world vulnerabilities often involve multiple interactions rather than a single self-contained function call. The reproduction contract should reflect this by structuring the exploit as a series of interactions instead of executing it immediately.  

### Task  
Generate a **realistic** reproduction smart contract named `Reproduction` that interacts with the vulnerable contract to re-trigger the identified vulnerability. If the vulnerable contract calls an external contract through an interface, `Reproduction` **must inherit from that interface** and implement all required functions.  

### Requirements  
- **Utilize the counterexample and vulnerability context:**  
  - Extract key function calls, transaction sequence, and final violation conditions.  
  - Structure the exploit accordingly, ensuring it includes all necessary elements to trigger the issue.  
- **Maintain Solidity compatibility:** The reproduction contract must match the Solidity version of the source contract and be compilable alongside it.  
- **Decomposed contract structure:**  
    - Use an interface-separated (Interaction-Separated)  pattern, where sequential interactions are needed rather than a single function that fully encapsulates the exploit.  Implement separate functions for setup, triggering the vulnerability, and interacting with the vulnerable contract.  
- **Strict output format:** Output only Solidity code. Do not include explanations, comments, or justifications.  

### Generate the reproduction contract
