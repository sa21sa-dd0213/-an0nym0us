### Role  
You are a blockchain security expert specializing in analyzing vulnerabilities in smart contracts using formal verification.  

### Source Program  
Below is the source code of a Solidity program that has been proven to be vulnerable:  
pragma solidity ^0.8.2;

contract C {
    function div(uint256 a, uint256 b) public returns (uint256) {
        return a / b;
    }

    function mod(uint256 a, uint256 b) public returns (uint256) {
        return a % b;
    }
}

### Counterexample  
The verifier ESBMC identified a division-by-zero in this program and generated a counterexample detailing the state changes, transaction sequence, violated property, and location of the final violation state:  
[Counterexample]

------------------------
  _ESBMC_Object_C = { .codehash = 0 }

------------------------
Violated property:

  division by zero
  b != 0

VERIFICATION FAILED

Bug found (k = 3)

### Vulnerability Context
The violated property, division-by-zero, occurs when a contract attempts to divide a number by zero, resulting in a runtime exception and contract execution failure. A common approach to trigger a division-by-zero is to pass zero as a divisor in a function that performs division.

### Background  
Real-world vulnerabilities often involve multiple interactions rather than a single self-contained function call. The reproduction contract should reflect this by structuring the exploit as a series of interactions instead of executing it immediately.  

### Task  
Generate a **realistic** reproduction smart contract named `Reproduction` that interacts with the vulnerable contract to re-trigger the identified vulnerability. If the vulnerable contract calls an external contract through an interface, `Reproduction` **must inherit from that interface** and implement all required functions.  

### Requirements  
- **Utilize the counterexample and vulnerability context:**  
  - Extract key function calls, transaction sequence, and final violation conditions.  
  - Structure the exploit accordingly, ensuring it includes all necessary elements to trigger the issue.  
- **Maintain Solidity compatibility:** The reproduction contract must match the Solidity version of the source contract and be compilable alongside it.  
- **Decomposed contract structure:**  
    - Use an interface-separated (Interaction-Separated)  pattern, where sequential interactions are needed rather than a single function that fully encapsulates the exploit.  Implement separate functions for setup, triggering the vulnerability, and interacting with the vulnerable contract.  
- **Strict output format:** Output only Solidity code. Do not include explanations, comments, or justifications.  

### Generate the reproduction contract
