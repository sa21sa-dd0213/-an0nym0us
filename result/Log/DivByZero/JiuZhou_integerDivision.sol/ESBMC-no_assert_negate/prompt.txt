### Role  
You are a blockchain security expert specializing in analyzing vulnerabilities in smart contracts using formal verification.  

### Source Program  
Below is the source code of a Solidity program that has been proven to be vulnerable:  
pragma solidity ^0.8.2;

contract getWageNumber {
    uint256 public coefficient;
    uint256 public DailyWage;
    address public boss;

    constructor() public{
        DailyWage = 100;
        coefficient = 3;
        boss = msg.sender;
    }

    function setDailyWage(uint256 _wage) external {
		require(msg.sender == boss);
        DailyWage = _wage;
    }

    function setCoefficient(uint256 _co) external {
		require(msg.sender == boss);
        coefficient = _co;
    }

    function calculateWage(uint256 dayNumber) external view  {
        require(msg.sender == boss);
		uint256 baseWage = DailyWage / coefficient;

    }
}

### Counterexample  
The verifier ESBMC identified a division-by-zero in this program and generated a counterexample detailing the state changes, transaction sequence, violated property, and location of the final violation state:  
[Counterexample]

State 13  thread 0
----------------------------------------------------
  _ESBMC_Object_getWageNumber = { .coefficient=3, .DailyWage=100, .anon_pad$2=0, .boss=0,
    .anon_pad$4=0, .codehash=0, .balance=0,
    .anon_pad$7=0, .address=0, .anon_pad$9=0 }

State 17 file origin.sol line 22 function setCoefficient thread 0
----------------------------------------------------
  this->coefficient = 0 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 19 file origin.sol line 27 function calculateWage thread 0
----------------------------------------------------
Violated property:
  file origin.sol line 27 function calculateWage
  division by zero
  this->coefficient != 0

VERIFICATION FAILED

Bug found (k = 2)

### Vulnerability Context
The violated property, division-by-zero, occurs when a contract attempts to divide a number by zero, resulting in a runtime exception and contract execution failure. A common approach to trigger a division-by-zero is to pass zero as a divisor in a function that performs division.

### Background  
Real-world vulnerabilities often involve multiple interactions rather than a single self-contained function call. The reproduction contract should reflect this by structuring the exploit as a series of interactions instead of executing it immediately.  

### Task  
Generate a **realistic** reproduction smart contract named `Reproduction` that interacts with the vulnerable contract to re-trigger the identified vulnerability. If the vulnerable contract calls an external contract through an interface, `Reproduction` **must inherit from that interface** and implement all required functions.  

### Requirements  
- **Utilize the counterexample and vulnerability context:**  
  - Extract key function calls, transaction sequence, and final violation conditions.  
  - Structure the exploit accordingly, ensuring it includes all necessary elements to trigger the issue.  
- **Maintain Solidity compatibility:** The reproduction contract must match the Solidity version of the source contract and be compilable alongside it.  
- **Decomposed contract structure:**  
    - Use an interface-separated (Interaction-Separated)  pattern, where sequential interactions are needed rather than a single function that fully encapsulates the exploit.  Implement separate functions for setup, triggering the vulnerability, and interacting with the vulnerable contract.  
- **Strict output format:** Output only Solidity code. Do not include explanations, comments, or justifications.  

### Generate the reproduction contract
