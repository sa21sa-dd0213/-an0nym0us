### Role  
You are a blockchain security expert specializing in analyzing vulnerabilities in smart contracts using formal verification.  

### Source Program  
Below is the source code of a Solidity program that has been proven to be vulnerable:  
// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.4.26;

contract MyContract {
  function dyn_array_oob_simple(uint8 n) public pure {
    uint8[] memory a = new uint8[](n);
    a[0] = 100;
    assert(a[0] == 100);
  }
}

### Counterexample  
The verifier ESBMC identified a array out-of-bounds in this program and generated a counterexample detailing the state changes, transaction sequence, violated property, and location of the final violation state:  
[Counterexample]

State 15 file origin.sol line 6 function dyn_array_oob_simple thread 0
----------------------------------------------------
  a = 0

State 22 file origin.sol line 7 function dyn_array_oob_simple thread 0
----------------------------------------------------
Violated property:
  file origin.sol line 7 function dyn_array_oob_simple
  dereference failure: NULL pointer

VERIFICATION FAILED

Bug found (k = 1)

### Vulnerability Context
The violated property, array out-of-bounds, occurs when an array index accessed is equal to or greater than the arrayâ€™s length, leading to a contract crash. A common approach to trigger an array out-of-bounds error is to pass an invalid index value to an array access function.

### Background  
Real-world vulnerabilities often involve multiple interactions rather than a single self-contained function call. The reproduction contract should reflect this by structuring the exploit as a series of interactions instead of executing it immediately.  

### Task  
Generate a **realistic** reproduction smart contract named `Reproduction` that interacts with the vulnerable contract to re-trigger the identified vulnerability. If the vulnerable contract calls an external contract through an interface, `Reproduction` **must inherit from that interface** and implement all required functions.  

### Requirements  
- **Utilize the counterexample and vulnerability context:**  
  - Extract key function calls, transaction sequence, and final violation conditions.  
  - Structure the exploit accordingly, ensuring it includes all necessary elements to trigger the issue.  
- **Maintain Solidity compatibility:** The reproduction contract must match the Solidity version of the source contract and be compilable alongside it.  
- **Decomposed contract structure:**  
    - Use an interface-separated (Interaction-Separated)  pattern, where sequential interactions are needed rather than a single function that fully encapsulates the exploit.  Implement separate functions for setup, triggering the vulnerability, and interacting with the vulnerable contract.  
- **Strict output format:** Output only Solidity code. Do not include explanations, comments, or justifications.  

### Generate the reproduction contract
