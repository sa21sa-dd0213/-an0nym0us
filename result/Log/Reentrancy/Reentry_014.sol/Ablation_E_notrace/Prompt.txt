Below is the source code of a Solidity program that has been proven to be vulnerable: 
//https://github.com/fsainas/contracts-verification-benchmark/blob/main/contracts
// SPDX-License-Identifier: GPL-3.0-only
pragma solidity >= 0.8.2;


/// @custom:version conforming to specification.
contract Crowdfund {
    uint immutable goal;          // amount of ETH that must be donated for the crowdfunding to be succesful
    address immutable owner;      // receiver of the donated funds
    mapping(address => uint) public donors;

    constructor (address payable owner_, uint256 goal_) {
        owner = owner_;
	    goal = goal_;	
    }
    uint saved;

    function invstore() public {
        saved = address(this).balance;
    }

    function donate() public payable {
        donors[msg.sender] += msg.value;
        invstore();
    }

    function withdraw() public {
        require (address(this).balance >= goal);

        (bool succ,) = owner.call{value: address(this).balance}("");
        invstore();
        require(succ);
    }

    function invariant() public {

        assert(address(this).balance != saved);
    }

    function reclaim() public { 
        require (address(this).balance < goal);
        require (donors[msg.sender] > 0);

        uint amount = donors[msg.sender];

        (bool succ,) = msg.sender.call{value: amount}("");
        saved = saved - amount; 
        donors[msg.sender] = 0;
        invariant();
    }
}

Your task is to generate a reproduction smart contract that can re-trigger the vulnerability by interacting with the source program via a series of function calls.
Generate the reproduction contract without any comments.
