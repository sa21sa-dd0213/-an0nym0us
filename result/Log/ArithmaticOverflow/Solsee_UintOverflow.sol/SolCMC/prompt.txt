### Role  
You are a blockchain security expert specializing in analyzing vulnerabilities in smart contracts using formal verification.  

### Source Program  
Below is the source code of a Solidity program that has been proven to be vulnerable:  
pragma solidity >=0.6.0;

contract _MAIN_ {
    constructor () public {
        uint8 a = 255;
        uint8 b = 255;

        uint8 c = a + b;

        assert(c == 254);
        assert(c == a + b);
        assert(c > 255);

    }
}

### Counterexample  
The verifier SolCMC identified a arithmetic overflow in this program and generated a counterexample detailing the state changes, transaction sequence, violated property, and location of the final violation state:  
Overflow (resulting value larger than 255) happens here.
Counterexample:

a = 255
b = 255
c = 0

Transaction trace:
_MAIN_.constructor()
 --> origin.sol:9:19:
  |
9 |         uint8 c = a + b;
  |                   ^^^^^

1 verification condition(s) proved safe! Enable the model checker option "show proved safe" to see all of them.

### Vulnerability Context
The violated property, arithmetic overflow, occurs when a value exceeds the maximum limit for a data type, causing it to wrap around to a small value. A common approach to trigger an overflow is to add or multiply values that exceed the type's limit.

### Background  
Real-world vulnerabilities often involve multiple interactions rather than a single self-contained function call. The reproduction contract should reflect this by structuring the exploit as a series of interactions instead of executing it immediately.  

### Task  
Generate a **realistic** reproduction smart contract named `Reproduction` that interacts with the vulnerable contract to re-trigger the identified vulnerability. If the vulnerable contract calls an external contract through an interface, `Reproduction` **must inherit from that interface** and implement all required functions.  

### Requirements  
- **Utilize the counterexample and vulnerability context:**  
  - Extract key function calls, transaction sequence, and final violation conditions.  
  - Structure the exploit accordingly, ensuring it includes all necessary elements to trigger the issue.  
- **Maintain Solidity compatibility:** The reproduction contract must match the Solidity version of the source contract and be compilable alongside it.  
- **Decomposed contract structure:**  
    - Use an interface-separated (Interaction-Separated)  pattern, where sequential interactions are needed rather than a single function that fully encapsulates the exploit.  Implement separate functions for setup, triggering the vulnerability, and interacting with the vulnerable contract.  
- **Strict output format:** Output only Solidity code. Do not include explanations, comments, or justifications.  

### Generate the reproduction contract
