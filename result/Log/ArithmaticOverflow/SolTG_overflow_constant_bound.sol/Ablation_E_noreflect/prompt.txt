### Role  
You are a blockchain security expert specializing in analyzing vulnerabilities in smart contracts using formal verification.  

### Source Program  
Below is the source code of a Solidity program that has been proven to be vulnerable:  
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract OverflowVulnerable {
    mapping(address => uint256) public balances;

    event Deposit(address indexed user, uint256 amount);
    event Withdraw(address indexed user, uint256 amount);

    constructor() {
        balances[msg.sender] = 1000; 
    }

    function deposit(uint256 amount) public {
        require(amount > 0, "Amount must be greater than 0");
        balances[msg.sender] += amount;
        emit Deposit(msg.sender, amount);
    }

}

### Counterexample  
The verifier ESBMC identified a arithmetic overflow in this program and generated a counterexample detailing the state changes, transaction sequence, violated property, and location of the final violation state:  
State 54  thread 0
----------------------------------------------------
  _ESBMC_Object_OverflowVulnerable = { .balances=&dynamic_5_array[0], .anon_pad$1=0, .codehash=0,
    .balance=0, .anon_pad$4=0, .address=0,
    .balances_key=0 }

State 64 file origin.sol line 17 function deposit thread 0
----------------------------------------------------
Violated property:
  file origin.sol line 17 function deposit
  arithmetic overflow on add
  !overflow("+", this->balances[(signed long int)return_value$__ESBMC_findKeyUint$1], amount)

VERIFICATION FAILED

Bug found (k = 1)

### Vulnerability Context
The violated property, arithmetic overflow, occurs when a value exceeds the maximum limit for a data type, causing it to wrap around to a small value. A common approach to trigger an overflow is to add or multiply values that exceed the type's limit.

### Background  
Real-world vulnerabilities often involve multiple interactions rather than a single self-contained function call. The reproduction contract should reflect this by structuring the exploit as a series of interactions instead of executing it immediately.  

### Task  
Generate a **realistic** reproduction smart contract named `Reproduction` that interacts with the vulnerable contract to re-trigger the identified vulnerability. If the vulnerable contract calls an external contract through an interface, `Reproduction` **must inherit from that interface** and implement all required functions.  

### Requirements  
- **Utilize the counterexample and vulnerability context:**  
  - Extract key function calls, transaction sequence, and final violation conditions.  
  - Structure the exploit accordingly, ensuring it includes all necessary elements to trigger the issue.  
- **Maintain Solidity compatibility:** The reproduction contract must match the Solidity version of the source contract and be compilable alongside it.  
- **Decomposed contract structure:**  
    - Use an interface-separated (Interaction-Separated)  pattern, where sequential interactions are needed rather than a single function that fully encapsulates the exploit.  Implement separate functions for setup, triggering the vulnerability, and interacting with the vulnerable contract.  
- **Strict output format:** Output only Solidity code. Do not include explanations, comments, or justifications.  

### Generate the reproduction contract
