### Role  
You are a blockchain security expert specializing in analyzing vulnerabilities in smart contracts using formal verification.  

### Source Program  
Below is the source code of a Solidity program that has been proven to be vulnerable:  
contract C {
    bool a;
    bool b;
    bool c;
    bool d;
    bool e;
    bool f;

    function press_A() public {
        if (e) {
            a = true;
        } else {
            reset();
        }
    }

    function press_B() public {
        if (c) {
            b = true;
        } else {
            reset();
        }
    }

    function press_C() public {
        if (a) {
            c = true;
        } else {
            reset();
        }
    }

    function press_D() public {
        d = true;
    }

    function press_E() public {
        if (d) {
            e = true;
        } else {
            reset();
        }
    }

    function press_F() public {
        if (b) {
            f = true;
        } else {
            reset();
        }
    }

    function reset() internal {
        a = false;
        b = false;
        c = false;
        d = false;
        e = false;
        f = false;
    }

    function checkInvariant() public {
        assert(!f);
    }
}

### Counterexample  
The verifier SolCMC identified a assertion violation in this program and generated a counterexample detailing the state changes, transaction sequence, violated property, and location of the final violation state:  
Assertion violation might happen here.
  --> origin.sol:36:3:
   |
36 |            assert(!f);
   |            ^^^^^^^^^^

### Vulnerability Context
The violated property, assertion violation, occurs when an assert statement fails, causing the contract to revert due to an unexpected condition. A common approach to trigger an assertion violation is to provide inputs that force the contract into an invalid state where an assert(condition) fails.

### Background  
Real-world vulnerabilities often involve multiple interactions rather than a single self-contained function call. The reproduction contract should reflect this by structuring the exploit as a series of interactions instead of executing it immediately.  

### Task  
Generate a **realistic** reproduction smart contract named `Reproduction` that interacts with the vulnerable contract to re-trigger the identified vulnerability. If the vulnerable contract calls an external contract through an interface, `Reproduction` **must inherit from that interface** and implement all required functions.  

### Requirements  
- **Utilize the counterexample and vulnerability context:**  
  - Extract key function calls, transaction sequence, and final violation conditions.  
  - Structure the exploit accordingly, ensuring it includes all necessary elements to trigger the issue.  
- **Maintain Solidity compatibility:** The reproduction contract must match the Solidity version of the source contract and be compilable alongside it.  
- **Decomposed contract structure:**  
    - Use an interface-separated (Interaction-Separated)  pattern, where sequential interactions are needed rather than a single function that fully encapsulates the exploit.  Implement separate functions for setup, triggering the vulnerability, and interacting with the vulnerable contract.  
- **Strict output format:** Output only Solidity code. Do not include explanations, comments, or justifications.  

### Generate the reproduction contract
