### Role  
You are a blockchain security expert specializing in analyzing vulnerabilities in smart contracts using formal verification.  

pragma solidity ^0.8.0;

contract cs6 {
	uint x;
	function f() public returns (uint) {
		x = x + 1;
		return x;
	}
	function g(bool a) public returns (bool) {
		bool b;
		if (a) {
			x = 0;
			b = (f() > 0) || (f() > 0);
			//assert(x == 2);

		} else {
			assert(x < 10);

		}
		return b;
	}
}

### Counterexample  
The verifier SolCMC identified a assertion violation in this program and generated a counterexample detailing the state changes, transaction sequence, violated property, and location of the final violation state:  
Assertion violation happens here.
Counterexample:
x = 10
a = false
 = false
b = false

Transaction trace:
cs6.constructor()
State: x = 0
cs6.f()
State: x = 1
cs6.f()
State: x = 2
cs6.f()
State: x = 3
cs6.f()
State: x = 4
cs6.f()
State: x = 5
cs6.f()
State: x = 6
cs6.f()
State: x = 7
cs6.f()
State: x = 8
cs6.f()
State: x = 9
cs6.f()
State: x = 10
cs6.g(false)
  --> origin.sol:18:4:
   |
18 |                    assert(x < 10);
   |                    ^^^^^^^^^^^^^^

### Vulnerability Context
The violated property, assertion violation, occurs when an assert statement fails, causing the contract to revert due to an unexpected condition. A common approach to trigger an assertion violation is to provide inputs that force the contract into an invalid state where an assert(condition) fails.

### Background  
Real-world vulnerabilities often involve multiple interactions rather than a single self-contained function call. The reproduction contract should reflect this by structuring the exploit as a series of interactions instead of executing it immediately.  

### Task  
Generate a **realistic** reproduction smart contract named `Reproduction` that interacts with the vulnerable contract to re-trigger the identified vulnerability. If the vulnerable contract calls an external contract through an interface, `Reproduction` **must inherit from that interface** and implement all required functions.  

### Requirements  
- **Utilize the counterexample and vulnerability context:**  
  - Extract key function calls, transaction sequence, and final violation conditions.  
  - Structure the exploit accordingly, ensuring it includes all necessary elements to trigger the issue.  
- **Maintain Solidity compatibility:** The reproduction contract must match the Solidity version of the source contract and be compilable alongside it.  
- **Decomposed contract structure:**  
    - Use an interface-separated (Interaction-Separated)  pattern, where sequential interactions are needed rather than a single function that fully encapsulates the exploit.  Implement separate functions for setup, triggering the vulnerability, and interacting with the vulnerable contract.  
- **Strict output format:** Output only Solidity code. Do not include explanations, comments, or justifications.  

### Generate the reproduction contract
