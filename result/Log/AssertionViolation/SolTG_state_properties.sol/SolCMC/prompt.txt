### Role  
You are a blockchain security expert specializing in analyzing vulnerabilities in smart contracts using formal verification.  

### Source Program  
// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.8.0;

contract Robot {
    int x = 0;
    int y = 0;

    function moveLeftUp()  public {
        --x;
        ++y;
    }

    function moveLeftDown()  public {
        --x;
        --y;
    }

    function moveRightUp()  public {
        ++x;
        ++y;
    }

    function moveRightDown()  public {
        ++x;
        --y;
    }

    function inv() public view {
        assert((x + y) % 2 == 0);
    }
}

### Counterexample  
The verifier SolCMC identified a assertion violation in this program and generated a counterexample detailing the state changes, transaction sequence, violated property, and location of the final violation state:  
Assertion violation happens here.
Counterexample:
x = 2, y = 4

Transaction trace:
Robot.constructor()
State: x = 0, y = 0
Robot.moveRightUp()
State: x = 1, y = 1
Robot.moveRightUp()
State: x = 2, y = 2
Robot.moveRightUp()
State: x = 3, y = 3
Robot.moveLeftUp()
State: x = 2, y = 4
Robot.reach_2_4()
  --> origin.sol:30:5:
   |
30 |     assert(!(x == 2 && y == 4));
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

### Vulnerability Context
The violated property, assertion violation, occurs when an assert statement fails, causing the contract to revert due to an unexpected condition. A common approach to trigger an assertion violation is to provide inputs that force the contract into an invalid state where an assert(condition) fails.

### Background  
Real-world vulnerabilities often involve multiple interactions rather than a single self-contained function call. The reproduction contract should reflect this by structuring the exploit as a series of interactions instead of executing it immediately.  

### Task  
Generate a **realistic** reproduction smart contract named `Reproduction` that interacts with the vulnerable contract to re-trigger the identified vulnerability. If the vulnerable contract calls an external contract through an interface, `Reproduction` **must inherit from that interface** and implement all required functions.  

### Requirements  
- **Utilize the counterexample and vulnerability context:**  
  - Extract key function calls, transaction sequence, and final violation conditions.  
  - Structure the exploit accordingly, ensuring it includes all necessary elements to trigger the issue.  
- **Maintain Solidity compatibility:** The reproduction contract must match the Solidity version of the source contract and be compilable alongside it.  
- **Decomposed contract structure:**  
    - Use an interface-separated (Interaction-Separated)  pattern, where sequential interactions are needed rather than a single function that fully encapsulates the exploit.  Implement separate functions for setup, triggering the vulnerability, and interacting with the vulnerable contract.  
- **Strict output format:** Output only Solidity code. Do not include explanations, comments, or justifications.  

### Generate the reproduction contract
