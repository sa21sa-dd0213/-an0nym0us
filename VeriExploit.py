import os
from script import arg_parser
from script import (
    reproduction_generator,
    reproduction_validator,
    reproduction_reflector,
)
from script import log


def main():
    args = arg_parser.parse_arguments()

    print(f"üõ† Using solver: {args.solver}")
    print(f"üìÇ Processing file: {args.file}")

    # **Step 1: Skip contract generation if --debug no_GE is set**
    if args.debug != "no_GE":
        # **Step 2: Generate initial reproduction contract & store generation memory**
        initial_prompt, initial_response, counterexample = (
            reproduction_generator.generate_reproduction_contract(args)
        )
    else:
        initial_prompt, initial_response, counterexample = (
            reproduction_generator.baseline(args)
        )

    gen_memory = f"## Initial Generation Prompt:\n{initial_prompt}\n\n## Initial Response:\n{initial_response}\n"

    # **Step 3: Validate the generated contract**
    validate_result = reproduction_validator.validate_reproduction_contract(args)
    if validate_result == "Validation Success":
        log.cleanup_temp_files()
        return

    # **Step 4: Check if self-reflection is disabled**
    if args.debug == "no_RE":
        print("‚ö†Ô∏è Self-reflection disabled due to --debug no_RE flag.")
        log.cleanup_temp_files()
        return

    # **Step 5: Perform iterative self-reflection**
    reflect_memory = reproduction_reflector.perform_self_reflection(
        args, gen_memory, initial_response, validate_result, counterexample
    )

    # **Step 6: Save the final reflection output**
    if reflect_memory:
        log.save_reflection_log(reflect_memory)

    # **Step 7: Cleanup temporary files**
    log.cleanup_temp_files()


if __name__ == "__main__":
    main()

"""
Usage Example:
python3 VeriExploit.py -s SMTChecker -f example.sol -l RE
"""
